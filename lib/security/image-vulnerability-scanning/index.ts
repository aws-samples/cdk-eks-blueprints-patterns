import { Construct } from "constructs";
import * as blueprints from "@aws-quickstart/eks-blueprints";
import { SECRET_ARGO_ADMIN_PWD } from "../../multi-region-construct";
import { prevalidateSecrets } from "../../common/construct-utils";
import * as team from "../../teams/team-scan";
import * as ecr from "aws-cdk-lib/aws-ecr";

const gitUrl = "https://github.com/aws-samples/eks-blueprints-workloads.git";
const targetRevision = "main";

export default class ImageScanningWorkloadConstruct {
    async buildAsync(scope: Construct, id: string) {

        await prevalidateSecrets(ImageScanningWorkloadConstruct.name, process.env.CDK_DEFAULT_REGION!, SECRET_ARGO_ADMIN_PWD);

        const ecrRepositoryName = "ImageScanningRepository";
        const ecrRepository = blueprints.getNamedResource(
            ecrRepositoryName
        ) as ecr.Repository;

        const stackID = `${id}-blueprint`;
        await blueprints.EksBlueprint.builder()
            .account(process.env.CDK_DEFAULT_ACCOUNT!)
            .region(process.env.CDK_DEFAULT_REGION!)
            .resourceProvider(
                ecrRepositoryName,
                new EcrResourceProvider(ecrRepositoryName)
            )
            .addOns(
                new blueprints.ArgoCDAddOn({
                    bootstrapRepo: {
                        repoUrl: gitUrl,
                        targetRevision: targetRevision,
                        path: "teams/team-scan/dev",
                    },
                    bootstrapValues: {
                        spec: {
                            repositoryUri: ecrRepository.repositoryUri,
                            region: process.env.CDK_DEFAULT_REGION!,
                        },
                    },
                    adminPasswordSecretName: SECRET_ARGO_ADMIN_PWD,
                })
            )
            .teams(new team.TeamScan())
            .version('auto')
            .buildAsync(scope, stackID);
    }
}

class EcrResourceProvider implements blueprints.ResourceProvider<ecr.IRepository> {

    public constructor(private readonly ecrRepositoryName: string) {
        this.ecrRepositoryName = ecrRepositoryName;
    }

    provide(context: blueprints.ResourceContext): ecr.IRepository {
        const repository = new ecr.Repository(
            context.scope,
            this.ecrRepositoryName,
            {
                encryption: ecr.RepositoryEncryption.AES_256,
            }
        );
        return repository;
    }
}
