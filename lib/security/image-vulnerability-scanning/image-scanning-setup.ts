import { Construct } from "constructs";
import * as cr from "aws-cdk-lib/custom-resources";
import * as iam from "aws-cdk-lib/aws-iam";
import { Stack, StackProps } from "aws-cdk-lib";
import * as AWS from "aws-sdk";

const account = process.env.CDK_DEFAULT_ACCOUNT;
const region = process.env.CDK_DEFAULT_REGION;

export class ImageScanningSetupStack extends Stack {
    constructor(scope: Construct, id: string, props?: StackProps) {
        super(scope, id, { ...props, env: { account, region } });

        // Scan type configuration: BASIC or ENHANCED
        const scanType: AWS.ECR.ScanType = "ENHANCED";

        // ENHANCED scanning configuration
        const enhancedContinuousScanDuration: AWS.Inspector2.EcrRescanDuration =
            "LIFETIME";
        const enhancedScanRules: AWS.ECR.RegistryScanningRuleList = [
            {
                scanFrequency: "CONTINUOUS_SCAN",
                repositoryFilters: [{ filter: "prod", filterType: "WILDCARD" }],
            },
            {
                scanFrequency: "SCAN_ON_PUSH",
                repositoryFilters: [{ filter: "*", filterType: "WILDCARD" }],
            },
        ];

        // BASIC scanning configuration
        const basicScanRules: AWS.ECR.RegistryScanningRuleList = [
            {
                scanFrequency: "SCAN_ON_PUSH",
                repositoryFilters: [
                    {
                        filterType: "WILDCARD",
                        filter: "*",
                    },
                ],
            },
        ];

        let registyScanConfig: AWS.ECR.PutRegistryScanningConfigurationRequest = {};
        if (scanType === "ENHANCED") {
            registyScanConfig = {
                scanType: "ENHANCED",
                rules: enhancedScanRules,
            };
        } else if (scanType === "BASIC") {
            registyScanConfig = {
                scanType: "BASIC",
                rules: basicScanRules,
            };
        }

        new cr.AwsCustomResource(this, "ImageScanningEnabler", {
            policy: cr.AwsCustomResourcePolicy.fromStatements([
                new iam.PolicyStatement({
                    actions: ["config:*", "ecr:PutRegistryScanningConfiguration"],
                    resources: ["*"],
                }),
                new iam.PolicyStatement({
                    actions: [
                        "inspector2:Enable",
                        "inspector2:Disable",
                        "inspector2:ListFindings",
                        "inspector2:ListAccountPermissions",
                        "inspector2:ListCoverage",
                    ],
                    resources: ["*"],
                }),
                new iam.PolicyStatement({
                    actions: ["iam:CreateServiceLinkedRole"],
                    resources: ["*"],
                    conditions: {
                        StringEquals: {
                            "iam:AWSServiceName": ["inspector2.amazonaws.com"],
                        },
                    },
                }),
            ]),
            onUpdate: {
                service: "ECR",
                action: "putRegistryScanningConfiguration",
                parameters: registyScanConfig,
                physicalResourceId: cr.PhysicalResourceId.of("ImageScanningEnabler"),
            },
        });

        new cr.AwsCustomResource(this, "InspectorEcrConfigurator", {
            policy: cr.AwsCustomResourcePolicy.fromStatements([
                new iam.PolicyStatement({
                    actions: ["config:*", "inspector2:UpdateConfiguration"],
                    resources: ["*"],
                }),
            ]),
            onUpdate: {
                service: "Inspector2",
                action: "updateConfiguration",
                parameters: {
                    ecrConfiguration: {
                        rescanDuration: enhancedContinuousScanDuration,
                    },
                },
                physicalResourceId: cr.PhysicalResourceId.of(
                    "InspectorEcrConfigurator"
                ),
            },
        });
    }
}
